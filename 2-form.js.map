{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Оголоси поза будь-якими функціями об’єкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n// Використовуй метод делегування для відстеження змін у формі через подію input.Зберігай актуальні дані з полів email та message\n// у formData та записуй цей об’єкт у локальне сховище.Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\n// При завантаженні сторінки перевір, чи є дані у локальному сховищі.\n//  Якщо так, використовуй їх для заповнення форми та об'єкта formData. Якщо ні, залиш поля форми порожніми.\n// Перед відправленням форми переконайся, що обидва поля форми заповнені.Якщо будь - яке з полів(властивостей об’єкта formData) порожнє,\n//     показуй сповіщення з текстом «Fill please all fields». Якщо всі поля заповнені, виведи у консоль об’єкт formData з актуальними значеннями,\n//         очисти локальне сховище, об’єкт formData і поля форми.\n\nconst storageKey = 'feedback-form-state';\n\nconst formData = {\n  email: '',\n  message: '',\n};\n\nconst refs = {\n  form: document.querySelector('form'),\n  email: document.querySelector('.email-js'),\n  message: document.querySelector('.message-js'),\n};\n\nfunction initPage() {\n  const localData = loadFromLS(storageKey);\n  if (localData) {\n    refs.email.value = localData.email || '';\n    refs.message.value = localData.message || '';\n  }\n}\n\nfunction saveToLS(key, value) {\n  const jsonData = JSON.stringify(value);\n  localStorage.setItem(key, jsonData);\n}\n\nfunction loadFromLS(key) {\n  const body = localStorage.getItem(key);\n  try {\n    return JSON.parse(body);\n  } catch {\n    return body;\n  }\n}\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const emailForm = e.target.elements.email.value.trim();\n  const messageForm = e.target.elements.message.value.trim();\n  if (!emailForm || !messageForm) {\n    alert('Fill please all fields');\n    return;\n  }\n  formData.email = emailForm;\n  formData.message = messageForm;\n  saveToLS(storageKey, formData);\n  console.log(formData);\n  localStorage.removeItem(storageKey);\n  e.target.reset();\n}\n\nfunction onInputChange() {\n  formData.email = refs.email.value.trim();\n  formData.message = refs.message.value.trim();\n  saveToLS(storageKey, formData); \n}\n\ninitPage();\n\nrefs.form.addEventListener('submit', onFormSubmit);\nrefs.email.addEventListener('input', onInputChange);\nrefs.message.addEventListener('input', onInputChange);\n"],"names":["storageKey","formData","refs","initPage","localData","loadFromLS","saveToLS","key","value","jsonData","body","onFormSubmit","emailForm","messageForm","onInputChange"],"mappings":"oDASA,MAAMA,EAAa,sBAEbC,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAEMC,EAAO,CACX,KAAM,SAAS,cAAc,MAAM,EACnC,MAAO,SAAS,cAAc,WAAW,EACzC,QAAS,SAAS,cAAc,aAAa,CAC/C,EAEA,SAASC,GAAW,CAClB,MAAMC,EAAYC,EAAWL,CAAU,EACnCI,IACFF,EAAK,MAAM,MAAQE,EAAU,OAAS,GACtCF,EAAK,QAAQ,MAAQE,EAAU,SAAW,GAE9C,CAEA,SAASE,EAASC,EAAKC,EAAO,CAC5B,MAAMC,EAAW,KAAK,UAAUD,CAAK,EACrC,aAAa,QAAQD,EAAKE,CAAQ,CACpC,CAEA,SAASJ,EAAWE,EAAK,CACvB,MAAMG,EAAO,aAAa,QAAQH,CAAG,EACrC,GAAI,CACF,OAAO,KAAK,MAAMG,CAAI,CAC1B,MAAU,CACN,OAAOA,CACR,CACH,CAEA,SAASC,EAAa,EAAG,CACvB,EAAE,eAAc,EAEhB,MAAMC,EAAY,EAAE,OAAO,SAAS,MAAM,MAAM,OAC1CC,EAAc,EAAE,OAAO,SAAS,QAAQ,MAAM,OACpD,GAAI,CAACD,GAAa,CAACC,EAAa,CAC9B,MAAM,wBAAwB,EAC9B,MACD,CACDZ,EAAS,MAAQW,EACjBX,EAAS,QAAUY,EACnBP,EAASN,EAAYC,CAAQ,EAC7B,QAAQ,IAAIA,CAAQ,EACpB,aAAa,WAAWD,CAAU,EAClC,EAAE,OAAO,OACX,CAEA,SAASc,GAAgB,CACvBb,EAAS,MAAQC,EAAK,MAAM,MAAM,KAAI,EACtCD,EAAS,QAAUC,EAAK,QAAQ,MAAM,KAAI,EAC1CI,EAASN,EAAYC,CAAQ,CAC/B,CAEAE,IAEAD,EAAK,KAAK,iBAAiB,SAAUS,CAAY,EACjDT,EAAK,MAAM,iBAAiB,QAASY,CAAa,EAClDZ,EAAK,QAAQ,iBAAiB,QAASY,CAAa"}